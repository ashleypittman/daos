#
# Copyright 2018-2020, Intel Corporation
#
# 'recipe' for Docker to build an image of Ubuntu-based
# environment for building the DAOS project.
#

# Pull base image
FROM ubuntu:20.04
LABEL maintainer="daos@daos.groups.io"

# Build arguments can be set via --build-arg
# use same UID as host and default value of 1000 if not specified
ARG UID=1000

# Update distribution
# It's better to put the apt-get update in the same "cache layer" as the
# apt-get install command so that the apt database is updated if/when the
# installed packages list below is updated

# Install basic tools
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
            autoconf bash clang cmake curl doxygen flex                 \
            gcc git graphviz                                            \
            libaio-dev libboost-dev libcmocka0 libcmocka-dev            \
            libcunit1-dev libevent-dev libibverbs-dev libiscsi-dev      \
            libltdl-dev libnuma-dev librdmacm-dev libreadline6-dev      \
            libssl-dev libtool-bin libyaml-dev                          \
            locales make meson nasm ninja-build pandoc patch            \
            pylint python-dev python3-dev scons sg3-utils uuid-dev      \
            yasm valgrind libhwloc-dev man fuse3 libfuse3-dev           \
            openjdk-8-jdk maven libopenmpi-dev patchelf libjson-c-dev   \
            liblz4-dev python3-distro

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
                       software-properties-common &&                    \
    apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
                       libsafec-dev libipmctl-dev ndctl ipmctl golang-go

# hack the default shell to bash instead of dash
RUN rm /bin/sh && ln -s bash /bin/sh

RUN locale-gen en_US.UTF-8 || cat /usr/share/i18n/SUPPORTED

# use Java 8 instead of default Java 11
RUN update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

# Dependencies

# Add DAOS user
ENV USER daos
ENV PASSWD daos
RUN useradd -u $UID -ms /bin/bash $USER
RUN echo "$USER:$PASSWD" | chpasswd

# Create directory for DAOS backend storage
RUN mkdir -p /opt/daos && chown -R daos.daos /opt/daos
RUN mkdir /mnt/daos && chown daos.daos /mnt/daos
RUN mkdir /var/run/daos_server && chown daos.daos /var/run/daos_server
RUN mkdir /var/run/daos_agent && chown daos.daos /var/run/daos_agent

# Set maven repo mirror
RUN mkdir -p /root/.m2
COPY utils/mavern_settings.xml /root/.m2/settings.xml

#WORKDIR /home/daos
#COPY src/client/java/ .
#RUN mvn --batch-mode dependency:go-offline

WORKDIR /home/daos/pre
COPY SConstruct .
COPY utils/sl utils/sl
COPY utils/build.config utils/
RUN ln -s utils/sl site_scons

# set PREBUILD to skip initial build.
ARG PREBUILD=yes

RUN [ "$PREBUILD" == "yes" ] && scons --build-deps=yes install PREFIX=/opt/daos --deps-only && /bin/rm -rf build *.gz

# copy DAOS tree
WORKDIR /home/daos
COPY VERSION LICENSE ftest.sh SConstruct API_VERSION ./
COPY utils utils
COPY src src
RUN ln -s utils/sl site_scons

# set NOBUILD to disable build
ARG NOBUILD=no

# select compiler to use
ARG COMPILER=gcc

# Build DAOS & dependencies
RUN [ "$NOBUILD" != "no" ] && scons --build-deps=no -j 4 install PREFIX=/opt/daos COMPILER=$COMPILER

# Set environment variables
ENV LD_LIBRARY_PATH=/opt/daos/lib:/opt/daos/lib64:$LD_LIBRARY_PATH
ENV PATH=/opt/daos/bin:$PATH
ENV FI_SOCKETS_MAX_CONN_RETRY=1

# Copy example config files to /opt/daos
RUN [ "$NOBUILD" != "no" ] cp -r utils/config/examples /opt/daos

# Build java and hadoop bindings
WORKDIR /home/daos/src/client/java
#RUN [ "$NOBUILD" != "no" ] mvn clean install -T 1C -DskipITs -Ddaos.install.path=/opt/daos
WORKDIR /home/daos

# Remove local copy
RUN rm -rf /home/daos/*
