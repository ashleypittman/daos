name: Test landings and prepare docker images.

on:
  push:
    branches:    
      - gha-dev

jobs:

  # Build a base Docker image, and save it with a key based on the hash of the dependencies.
  # If the source hasn't changed then this will be a cache-read, followed by a cache-write which
  # will fail as the cache exists, but the read will put it to the front of the LRU queue.
  # If the source has changed then the cache-read will fail, a new build will be performed and
  # saved to the cache with a new key.
  # This workflow only runs on landings, so the cache will only be built/saved when this changes,
  # builds for specific PRs will attempt to read this cache only, but not save anything.
  # For that reason set concurrency to 1 here for maximum reliability.
  Prepare:
    name: Build docker images
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        distro: [ubuntu.20.04, centos.8, leap.15, fedora, rocky, alma]
        include:
          - distro: fedora
            base: centos.8
            with: fedora:34
          - distro: rocky
            base: centos.8
            with: rockylinux/rockylinux:8
          - distro: alma
            base: centos.8
            with: almalinux:8
          - distro: centos.8
            base: centos.8
            with: centos:8
          - distro: ubuntu.20.04
            base: ubuntu.20.04
            with: ubuntu.20.04
          - distro: leap.15
            base: leap.15
            with: leap.15
    env:
      DEPS_JOBS: 10
      BASE_DISTRO: ${{ matrix.with }}
    steps:
    - uses: actions/checkout@v2
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
      with:
        key: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-{hash}
        restore-keys: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-
        concurrency: 1
    - name: Prepare base image in Docker
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DAOS_DEPS_BUILD=no
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
    - name: Build dependencies in Docker
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DAOS_BUILD=no
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
    - name: Prune images not required for build.
      run: docker images --all --filter label=DAOS=true --quiet | xargs docker rmi --no-prune

  Build-and-test:
    name: Run DAOS/NLT tests
    needs: Prepare
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        distro: [ubuntu.20.04]
    env:
      DEPS_JOBS: 10
      COMPILER: clang
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
      with:
        key: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-{hash}
        restore-keys: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-
        skip-save: true
    - name: Update dependencies in image.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.distro }}
                          --build-arg DAOS_BUILD=no
                          --build-arg DEPS_JOBS
                          --build-arg DAOS_KEEP_SRC=yes
                          --tag build-image
    - name: Build and Test
      run: ./utils/run_in_ga_wrapper.sh
    - name: Publish NLT test results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v1.17
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: nlt-junit.xml
        comment_mode: off
        fail_on: nothing

  Build:
    name: Build DAOS
    needs: Prepare
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        distro: [ubuntu.20.04, centos.8, leap.15, fedora, rocky, alma]
        compiler: [clang, gcc]
        include:
          - distro: fedora
            base: centos.8
            with: fedora:34
            java: NO
          - distro: rocky
            base: centos.8
            with: rockylinux/rockylinux:8
            java: YES
          - distro: alma
            base: centos.8
            with: almalinux:8
            java: YES
          - distro: centos.8
            base: centos.8
            with: centos:8
            java: YES
          - distro: ubuntu.20.04
            base: ubuntu.20.04
            with: ubuntu.20.04
            java: YES
          - distro: leap.15
            base: leap.15
            with: leap.15
            java: YES
    env:
      DEPS_JOBS: 10
      BASE_DISTRO: ${{ matrix.with }}
      COMPILER: ${{ matrix.compiler }}
      DAOS_JAVA_BUILD: ${{ matrix.java }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
      with:
        key: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-{hash}
        restore-keys: bc-${{ matrix.distro }}-${{ hashFiles('site_scons', 'utils/docker', 'utils/build.config', 'SConstruct', '.github/workflows/landing-builds.yml', '.dockerignore') }}-
        skip-save: true
    - name: Update dependencies in image.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
                          --build-arg DAOS_BUILD=no
    - name: Build in docker.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
                          --build-arg DAOS_JAVA_BUILD=no
                          --build-arg COMPILER
    - name: Build Java in docker.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
                          --build-arg DAOS_JAVA_BUILD
                          --build-arg COMPILER
    - name: Build debug in docker.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
                          --build-arg DAOS_JAVA_BUILD=no
                          --build-arg DAOS_BUILD_TYPE=debug
                          --build-arg COMPILER
    - name: Build devel in docker.
      run: docker build . --file utils/docker/Dockerfile.${{ matrix.base }}
                          --build-arg DEPS_JOBS
                          --build-arg BASE_DISTRO
                          --build-arg DAOS_JAVA_BUILD=no
                          --build-arg DAOS_BUILD_TYPE=dev
                          --build-arg COMPILER
