
name: Setup cache

on: push

jobs:

  startup:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check
      run: find built && rm -rf built && cat built/date.txt || true

    - name: Compress
      run: mkdir built && tar -cvf built/out.tar utils && date > built/date.txt

    - name: Populate cache
      uses: actions/cache@v2
      with:
        path: built
        key: daos-built-${{ hashFiles('built/date.txt') }}

  # Build a base Docker image, and save it with a key based on the
  # hash.
  # If the source hasn't changed then this will be a cache-read, followed
  # by a cache-write which will fail as the cache exists, but the read will
  # put it to the front of the LRU queue.
  # If the source has changed then the cache-read will fail, a new build will
  # be performed and saved to the cache with a new key.
  Prepare:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: satackey/action-docker-layer-caching@v0.0.11
      with:
        key: docker-${{ hashFiles('utils/sl', 'utils/docker', 'utils/build.config', 'SConstruct') }}
    - name: Set UID
      run: echo UID=`id -u` >> $GITHUB_ENV
      #    - name: Build base image
      #run: docker build . -f utils/docker/Dockerfile.ubuntu.20.04
      #                    --build-arg DAOS_DEPS_BUILD=no --build-arg UID
    - name: Build DAOS dependencies in image
      run: docker build . -f utils/docker/Dockerfile.ubuntu.20.04
                          --build-arg DAOS_BUILD=no --build-arg UID

  # Run the build.  Will pull the cache from either an exact match
  # of the files, or the most recent cache available.  Will not push
  # any cache.
  Build:
    runs-on: ubuntu-20.04
    needs: Prepare
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Restore Cache
      id: cache-restore
      uses: satackey/action-docker-layer-caching@v0.0.11
      with:
        key: docker-${{ hashFiles('utils/sl', 'utils/docker', 'utils/build.config', 'SConstruct') }}
        restore-keys: docker-
        skip-save: true
    - name: Set UID
      run: echo UID=`id -u` >> $GITHUB_ENV
      # Now do the whole build in one go.  This should just build DAOS, but
      # may build the whole stack if there are issues with the cache.
      # Splitting this out into three builds however would take extra time
      # on all builds.
    - name: Build DAOS
      run: docker build . -f utils/docker/Dockerfile.ubuntu.20.04
                          --build-arg UID
                          --build-arg COMPILER=${{ matrix.compiler }}
                          --tag builder
    - name: Run something
      run: docker run builder ls

  # Checkout a version of the cache, read the contents.  As there
  # doesn't seem to be a way to read but not save the cache then
  # set a common key, and empty the diretory.
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch cache
        id: cache-primes
        uses: actions/cache@v2
        with:
          path: built
          key: daos-deadend
          restore-keys: daos-built-


      - name: Clear cache
        run: rm -rf built
